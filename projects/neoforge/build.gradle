plugins {
    id 'java-library'
    id 'maven-publish'
}

dynamicProject {
    runtime("${project.minecraft_version}-${project.neoform_version}",
            rootProject.layout.projectDirectory.dir('patches'),
            rootProject.layout.projectDirectory.dir('rejects'))
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(project.java_version))
    }
}

minecraft {
    accessTransformers {
        file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')
    }
}

sourceSets {
    main {
        java {
            srcDirs rootProject.file('src/main/java')
        }
        resources {
            srcDirs rootProject.file('src/main/resources'), rootProject.file('src/generated/resources')
        }
    }
}

dependencies {
    pluginLayerLibrary "net.neoforged.fancymodloader:core:${project.fancy_mod_loader_version}"
    pluginLayerLibrary "net.neoforged.fancymodloader:language-java:${project.fancy_mod_loader_version}"
    pluginLayerLibrary "net.neoforged.fancymodloader:language-lowcode:${project.fancy_mod_loader_version}"
    pluginLayerLibrary "net.neoforged.fancymodloader:language-minecraft:${project.fancy_mod_loader_version}"

    gameLayerLibrary ("net.neoforged.fancymodloader:events:${project.fancy_mod_loader_version}") {
        exclude group: 'org.slf4j'
    }

    runtimeOnly "cpw.mods:bootstraplauncher:${project.bootstraplauncher_version}"

    moduleOnly "cpw.mods:securejarhandler:${project.securejarhandler_version}"
    moduleOnly "org.ow2.asm:asm:${project.asm_version}"
    moduleOnly "org.ow2.asm:asm-commons:${project.asm_version}"
    moduleOnly "org.ow2.asm:asm-tree:${project.asm_version}"
    moduleOnly "org.ow2.asm:asm-util:${project.asm_version}"
    moduleOnly "org.ow2.asm:asm-analysis:${project.asm_version}"
    moduleOnly "cpw.mods:bootstraplauncher:${project.bootstraplauncher_version}"
    moduleOnly "net.neoforged:JarJarFileSystems:${project.jarjar_version}"

    installer ("net.neoforged.fancymodloader:loader:${project.fancy_mod_loader_version}") {
        exclude group: 'org.slf4j'
    }
    installer ("net.neoforged.fancymodloader:earlydisplay:${project.fancy_mod_loader_version}") {
        exclude group: 'org.lwjgl'
        exclude group: 'org.slf4j'
    }
    installer "cpw.mods:securejarhandler:${project.securejarhandler_version}"
    installer "org.ow2.asm:asm:${project.asm_version}"
    installer "org.ow2.asm:asm-commons:${project.asm_version}"
    installer "org.ow2.asm:asm-tree:${project.asm_version}"
    installer "org.ow2.asm:asm-util:${project.asm_version}"
    installer "org.ow2.asm:asm-analysis:${project.asm_version}"
    installer "net.neoforged:accesstransformers:${project.accesstransformers_version}"
    installer "net.neoforged:bus:${project.eventbus_version}"
    installer "net.neoforged:neoforgespi:${project.spi_version}"
    installer "net.neoforged:coremods:${project.coremods_version}"
    installer "cpw.mods:modlauncher:${project.modlauncher_version}"
    installer "net.minecraftforge:unsafe:${project.unsafe_version}"
    installer "net.neoforged:mergetool:${project.mergetool_version}:api"
    installer "com.electronwill.night-config:core:${project.nightconfig_version}"
    installer "com.electronwill.night-config:toml:${project.nightconfig_version}"
    installer "org.apache.maven:maven-artifact:${project.apache_maven_artifact_version}"
    installer "net.jodah:typetools:${project.typetools_version}"
    installer "net.minecrell:terminalconsoleappender:${project.terminalconsoleappender_version}"
    installer "org.spongepowered:mixin:${project.mixin_version}"
    installer "org.openjdk.nashorn:nashorn-core:${project.nashorn_core_version}"
    installer ("net.neoforged:JarJarSelector:${project.jarjar_version}") {
        exclude group: 'org.slf4j'
    }
    installer ("net.neoforged:JarJarMetadata:${project.jarjar_version}") {
        exclude group: 'org.slf4j'
    }

    compileOnly "org.jetbrains:annotations:${project.jetbrains_annotations_version}"

    // craftbukkit
    installer 'org.fusesource.jansi:jansi:1.18'
    installer 'jline:jline:2.14.6'
    installer 'com.googlecode.json-simple:json-simple:1.1.1'
    installer 'org.xerial:sqlite-jdbc:3.42.0.1'
    installer 'com.mysql:mysql-connector-j:8.1.0'

    installer 'net.md-5:SpecialSource:1.11.2'
    // spigot
    installer 'net.md-5:bungeecord-chat:1.20-R0.1' // #14
    installer 'commons-codec:commons-codec:1.16.0'
    installer 'net.sf.jopt-simple:jopt-simple:5.0.4'

    installer 'io.izzel:tools:1.3.0'
    installer 'com.mohistmc:dynamicenum:0.2'
    installer(libs.i18n)
    installer(libs.json)
    installer(libs.tools)
    installer 'com.mohistmc:brigadier:1.20.1'
    installer 'com.mohistmc:librariesvault:1.20.2'
    installer "com.mohistmc:eventbus:6.2.0"

    installer 'commons-lang:commons-lang:2.6-mohist'

    // Paper start
    installer(libs.bundles.log4j)
    installer(libs.bundles.adventure)
    // Paper end
}

runTypes {
    client {
        singleInstance false
        client true

        arguments.addAll '--fml.neoForgeVersion', project.version
        arguments.addAll '--fml.fmlVersion', project.fancy_mod_loader_version
        arguments.addAll '--fml.mcVersion', project.minecraft_version
        arguments.addAll '--fml.neoFormVersion', project.neoform_version
    }

    server {
        server true

        arguments.addAll '--fml.neoForgeVersion', project.version
        arguments.addAll '--fml.fmlVersion', project.fancy_mod_loader_version
        arguments.addAll '--fml.mcVersion', project.minecraft_version
        arguments.addAll '--fml.neoFormVersion', project.neoform_version
    }

    gameTestServer {
        from project.runTypes.server

        gameTest true
    }

    gameTestClient {
        from project.runTypes.client

        gameTest true
    }

    data {
        dataGenerator true

        // Don't set modid here so we can reuse this runType for test datagen
        arguments.addAll '--fml.neoForgeVersion', project.version
        arguments.addAll '--fml.fmlVersion', project.fancy_mod_loader_version
        arguments.addAll '--fml.mcVersion', project.minecraft_version
        arguments.addAll '--fml.neoFormVersion', project.neoform_version
    }
}

runs {
    client { }
    server { }
    gameTestServer { }
    gameTestClient { }
    "Data" {
        configure project.runTypes.data

        programArguments.addAll '--mod', 'neoforge'

        modSources.add project.sourceSets.main

        idea {
            primarySourceSet project.sourceSets.main
        }
    }
}

runs.configureEach { it ->
    final File gameDir = project.file("run/${it.name}") as File
    gameDir.mkdirs();

    it.workingDirectory.set gameDir
    it.programArguments.addAll '--gameDir', "\"${gameDir.absolutePath}\""
}

launcherProfile {
    arguments {
        game '--fml.neoForgeVersion'
        game project.version
        game '--fml.fmlVersion'
        game project.fancy_mod_loader_version
        game '--fml.mcVersion'
        game project.minecraft_version
        game '--fml.neoFormVersion'
        game project.neoform_version
    }
}

userdevProfile {
    runTypes.configureEach {
        argument '--fml.neoForgeVersion'
        argument project.version
        argument '--fml.fmlVersion'
        argument project.fancy_mod_loader_version
        argument '--fml.mcVersion'
        argument project.minecraft_version
        argument '--fml.neoFormVersion'
        argument project.neoform_version
    }
}

tasks.withType(Javadoc.class).configureEach {
    options.tags = [
            'apiNote:a:<em>API Note:</em>',
            'implSpec:a:<em>Implementation Requirements:</em>',
            'implNote:a:<em>Implementation Note:</em>'
    ]
    options.addStringOption('Xdoclint:all,-missing', '-public')
}

tasks.withType(GenerateModuleMetadata).configureEach { enabled = false }

configurations {
    forValidation {
        canBeConsumed = true
        canBeResolved = false
        attributes {
            attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.LIBRARY))
            attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
            attribute(Bundling.BUNDLING_ATTRIBUTE, objects.named(Bundling, Bundling.EXTERNAL))
            attribute(LibraryElements.LIBRARY_ELEMENTS_ATTRIBUTE, objects.named(LibraryElements, LibraryElements.JAR))
        }

        extendsFrom api, runtimeOnly
    }
}

artifacts {
    forValidation(jar.archiveFile) {
        builtBy(jar)
    }
}

minecraft {
    modIdentifier 'minecraft'
}
